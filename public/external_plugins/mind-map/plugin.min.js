import {ref,onMounted} from 'vue'
import MindMap from 'simple-mind-map'
import MiniMap from 'simple-mind-map/src/plugins/MiniMap.js'
import Watermark from 'simple-mind-map/src/plugins/Watermark.js'
import KeyboardNavigation from 'simple-mind-map/src/plugins/KeyboardNavigation.js'
import ExportPDF from 'simple-mind-map/src/plugins/ExportPDF.js'
import ExportXMind from 'simple-mind-map/src/plugins/ExportXMind.js'
import Export from 'simple-mind-map/src/plugins/Export.js'
import Drag from 'simple-mind-map/src/plugins/Drag.js'
import Select from 'simple-mind-map/src/plugins/Select.js'
import RichText from 'simple-mind-map/src/plugins/RichText.js'
import AssociativeLine from 'simple-mind-map/src/plugins/AssociativeLine.js'
import TouchEvent from 'simple-mind-map/src/plugins/TouchEvent.js'
import NodeImgAdjust from 'simple-mind-map/src/plugins/NodeImgAdjust.js'
import SearchPlugin from 'simple-mind-map/src/plugins/Search.js'
import Painter from 'simple-mind-map/src/plugins/Painter.js'
import ScrollbarPlugin from 'simple-mind-map/src/plugins/Scrollbar.js'
import Formula from 'simple-mind-map/src/plugins/Formula.js'
import Cooperate from 'simple-mind-map/src/plugins/Cooperate.js'


MindMap.usePlugin(MiniMap)
  .usePlugin(Watermark)
  .usePlugin(Drag)
  .usePlugin(KeyboardNavigation)
  .usePlugin(ExportPDF)
  .usePlugin(ExportXMind)
  .usePlugin(Export)
  .usePlugin(Select)
  .usePlugin(AssociativeLine)
  .usePlugin(NodeImgAdjust)
  .usePlugin(TouchEvent)
  .usePlugin(SearchPlugin)
  .usePlugin(Painter)
  .usePlugin(Formula)

  const mindMapContainerRef = ref(null);
  let mindMap = null;
  const mindData = {
    data: {
      text: 'Root Node',
    },
    children: [
     
    ],
  };
  
  async function init() {
    mindMap = new MindMap({
      el: mindMapContainerRef.value,
      data: mindData,
    });
  }
  
  onMounted(async () => {
    init();
  });

;(function () {
  tinymce.PluginManager.add('mindmap_plugin', function(editor, url) {
    editor.ui.registry.addButton('mindmap', {
        // text: '生成思维导图',
        icon: 'mind-map',
        onAction: function() {
            const selectedText = editor.selection.getContent();

           
            if (!selectedText) {
                editor.windowManager.alert('请先选中一段文字！');
                return;
            }

            const mindMapData = {
                data: {
                    text: selectedText,
                },
                children: []
            };

            const mindMapContainerId = 'mindmap-container';
            const mindMapContainer = `<div id="${mindMapContainerId}" style=" height: 400px;"></div>`;

           
            editor.windowManager.open({
                title: '思维导图',
                body: {
                    type: 'panel',
                    items: [
                        {
                            type: 'htmlpanel',
                            html: mindMapContainer,
                        },
                    ],
                },
                buttons: [
                    {
                        type: 'submit',
                        text: '保存',
                        subtype: 'primary',
                        onclick: function() {
                            const mindMapContainerElement = document.getElementById(mindMapContainerId);
                            const mindMapInstance = new MindMap({
                                el: mindMapContainerElement,
                                data: mindMapData,
                            });
                            const imgData = mindMapInstance.exportImage(); // 假设这是自定义方法
                            editor.insertContent(`<img src="${imgData}" />`);
                            editor.windowManager.close();
                        }
                    },
                    {
                        type: 'cancel',
                        text: '取消',
                        onclick: 'close'
                    }
                ],
                onOpen: function() {
                    const mindMapContainerElement = document.getElementById(mindMapContainerId);
                    const mindMapInstance = new MindMap({
                        el: mindMapContainerElement,
                        data: mindMapData,
                    });
                }
            });
        }
    });
});

})()



